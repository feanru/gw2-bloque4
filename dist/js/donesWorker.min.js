const n={19676:1e4},t=[19675,19925,20796,20799,19665,19674,19626,19672,19673,19645,19650,19655,19639,19635,19621];async function e(e){if(void 0!==n[e]){const t=n[e];return{buys:{unit_price:t},sells:{unit_price:t}}}if(function(n){return t.includes(n)}(e))return null;try{const n=await fetch(`https://api.guildwars2.com/v2/commerce/prices/${e}`);return n.ok?await n.json():null}catch{return null}}async function i(n,t=null){const a=await async function(n){try{const t=await fetch(`https://api.guildwars2.com/v2/items/${n}?lang=es`);return t.ok?await t.json():null}catch{return null}}(n.id),r=await e(n.id),l=Array.isArray(n.components)?await Promise.all(n.components.map(t=>i(t,n.id))):[];return{id:n.id,name:a?.name||n.name,icon:a?.icon||null,rarity:a?.rarity||null,count:n.count,buy_price:r?.buys?.unit_price??null,sell_price:r?.sells?.unit_price??null,is_craftable:l.length>0,children:l,_parentId:t}}const a="undefined"!=typeof self?self:globalThis;a.onmessage=async n=>{const{rootIngredients:t=[]}=n.data||{},e=await Promise.all(t.map(n=>i(n,null)));a.postMessage({ingredientTree:e})};export{i as adaptNode};
