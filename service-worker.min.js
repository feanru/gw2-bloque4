const APP_VERSION="ve2a2644";const CACHE_VERSION=2;const STATIC_CACHE=`static-${APP_VERSION}-v${CACHE_VERSION}`;const API_CACHE=`api-${APP_VERSION}-v${CACHE_VERSION}`;const DEFAULT_TTL=5*60*1e3;const MANIFEST_CACHE="manifest-cache";let NEW_MANIFEST={};const VIDEO_ASSETS=["img/Secuencia01.mp4","img/Secuencia02.mp4","img/Secuencia03.mp4"];const PRECACHE_ASSETS=[...["/static/current/css/styles.min.css","/static/current/js/app.min.js","/static/current/js/sw-register.min.js","/static/current/js/vendor.min.js","/static/current/workers/costsWorker.js","/static/current/workers/ingredientTreeWorker.js","/static/current/workers/ventasComprasWorker.js"],"/offline.html"];self.addEventListener("install",event=>{self.skipWaiting();event.waitUntil((async()=>{const cache=await caches.open(STATIC_CACHE);await cache.addAll(VIDEO_ASSETS);await cache.addAll(PRECACHE_ASSETS);try{const res=await fetch("/dist/manifest.json",{cache:"no-store"});const manifest=await res.json();const hashes={};Object.entries(manifest).forEach(([orig,hashed])=>{const m=hashed.match(/\.([^.]+)\.min\.js$/);hashes[orig]={url:hashed,hash:m?m[1]:""}});NEW_MANIFEST=hashes}catch(e){NEW_MANIFEST={}}})())});self.addEventListener("activate",event=>{event.waitUntil((async()=>{const expectedCaches=[STATIC_CACHE,API_CACHE];let hadOldCaches=false;const manifestCache=await caches.open(MANIFEST_CACHE);let newManifest=NEW_MANIFEST;if(!Object.keys(newManifest).length){try{const res=await fetch("/dist/manifest.json",{cache:"no-store"});const manifest=await res.json();const hashes={};Object.entries(manifest).forEach(([orig,hashed])=>{const m=hashed.match(/\.([^.]+)\.min\.js$/);hashes[orig]={url:hashed,hash:m?m[1]:""}});newManifest=hashes}catch{newManifest={}}}const oldManifestRes=await manifestCache.match("manifest");const oldManifest=oldManifestRes?await oldManifestRes.json():{};const staticCache=await caches.open(STATIC_CACHE);await Promise.all(Object.entries(oldManifest).map(async([key,{url:oldUrl,hash:oldHash}])=>{const entry=newManifest[key];if(!entry||entry.hash!==oldHash){await staticCache.delete(oldUrl)}}));await manifestCache.put("manifest",new Response(JSON.stringify(newManifest)));await Promise.all([caches.keys().then(keys=>Promise.all(keys.filter(k=>/^(static|api)-/.test(k)&&!expectedCaches.includes(k)).map(k=>{hadOldCaches=true;return caches.delete(k)}))),cleanExpired()]);await self.clients.claim();if(hadOldCaches){const clientList=await self.clients.matchAll({type:"window"});clientList.forEach(c=>c.postMessage({type:"reload"}))}})())});self.addEventListener("fetch",event=>{const{request:request}=event;if(request.method!=="GET")return;const url=new URL(request.url);if(request.mode==="navigate"){event.respondWith((async()=>{try{return await fetch(request)}catch{const cache=await caches.open(STATIC_CACHE);const cached=await cache.match(request);return cached||cache.match("/offline.html")}})());return}if(VIDEO_ASSETS.some(asset=>url.pathname==="/"+asset)){event.respondWith(cacheFirst(request,STATIC_CACHE));return}if(url.pathname.startsWith("/static/current/js/")||url.pathname.startsWith("/static/current/css/")||url.pathname.startsWith("/static/current/workers/")){event.respondWith(cacheFirst(request,STATIC_CACHE));return}if(["/backend/api/user.php","/backend/api/favorites.php","/backend/api/comparisons.php"].includes(url.pathname)){event.respondWith(fetch(request,{cache:"no-store"}));return}if(url.pathname.startsWith("/backend/api/")&&!["/backend/api/user.php","/backend/api/favorites.php","/backend/api/comparisons.php"].includes(url.pathname)){event.respondWith((async()=>{const{response:response,fetchPromise:fetchPromise}=await staleWhileRevalidate(request,API_CACHE);event.waitUntil((async()=>{if(fetchPromise)await fetchPromise;await cleanExpired()})());return response})())}});self.addEventListener("message",event=>{const{data:data}=event;if(!data)return;if(data.type==="clean"){event.waitUntil(cleanExpired())}else if(data.type==="invalidate"&&data.url){event.waitUntil(caches.open(API_CACHE).then(c=>c.delete(data.url)))}else if(data.type==="invalidateItem"&&data.id!=null){event.waitUntil(invalidateItem(data.id))}else if(data.type==="invalidateAll"){event.waitUntil(caches.delete(API_CACHE))}});async function cacheFirst(req,cacheName){const cache=await caches.open(cacheName);const cached=await cache.match(req);if(cached){return cached}const res=await fetch(req);if(res.ok&&res.status===200){const type=res.headers.get("Content-Type")||"";const isJs=req.destination==="script"||new URL(req.url).pathname.endsWith(".js");if(!isJs||type.includes("javascript")){cache.put(req,res.clone())}}return res}function getTTLFromResponse(res){const cc=res.headers.get("Cache-Control")||"";const maxAgeMatch=cc.match(/max-age=(\d+)/);if(maxAgeMatch)return parseInt(maxAgeMatch[1],10)*1e3;const custom=res.headers.get("X-Cache-Ttl");if(custom)return parseInt(custom,10)*1e3;return DEFAULT_TTL}async function staleWhileRevalidate(req,cacheName){const cache=await caches.open(cacheName);const cached=await cache.match(req);const now=Date.now();const fetchAndUpdate=async()=>{const netRes=await fetch(req);if(netRes.ok){const ttl=getTTLFromResponse(netRes);const headers=new Headers(netRes.headers);if(ttl){headers.set("X-Cache-Expires",Date.now()+ttl)}const body=await netRes.clone().blob();const res=new Response(body,{status:netRes.status,statusText:netRes.statusText,headers:headers});await cache.put(req,res.clone());return res.clone()}return netRes};if(cached){const exp=parseInt(cached.headers.get("X-Cache-Expires")||"0",10);if(exp&&now<exp){return{response:cached,fetchPromise:null}}return{response:cached,fetchPromise:fetchAndUpdate()}}const fetchPromise=fetchAndUpdate();return{response:fetchPromise,fetchPromise:null}}async function cleanExpired(){const cache=await caches.open(API_CACHE);const keys=await cache.keys();const now=Date.now();await Promise.all(keys.map(async req=>{const res=await cache.match(req);const exp=parseInt(res.headers.get("X-Cache-Expires")||"0",10);if(exp&&now>exp){await cache.delete(req);return}if(!exp){const dateHeader=res.headers.get("Date");const created=dateHeader?new Date(dateHeader).getTime():0;if(created&&now-created>DEFAULT_TTL){await cache.delete(req)}}}))}async function invalidateItem(id){const cache=await caches.open(API_CACHE);const keys=await cache.keys();await Promise.all(keys.map(req=>{const url=new URL(req.url);if(url.searchParams.get("itemId")===String(id)||url.pathname.endsWith(`/items/${id}`)||url.searchParams.get("output")===String(id)){return cache.delete(req)}return null}))}